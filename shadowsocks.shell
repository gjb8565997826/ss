#!/bin/bash

check_system() { 
    [[ $EUID != 0 ]] && { echo "请以 root 权限运行脚本"; exit 1; }
    grep -qiE "debian|ubuntu" /etc/issue || { echo "仅支持 Debian 或 Ubuntu 系统"; exit 1; }
    arch=$(uname -m)
    [[ $arch != "x86_64" && $arch != "aarch64" ]] && { echo "不支持的系统架构"; exit 1; }
}

set_variable() {
    # 设置端口
    read -p "请输入端口号 [默认: 8964]：" server_port
    server_port=${server_port:-8964}
    while ! [[ $server_port =~ ^[0-9]+$ && $server_port -ge 1 && $server_port -le 65535 ]]; do
        echo "请输入 1-65535 之间的数字"
        read -p "请输入端口号：" server_port
    done

    # 设置加密方法
    echo "请选择加密方法 [1-6]："
    echo "    1. chacha20-ietf-poly1305 (推荐，通用加密方法)"
    echo "    2. aes-256-gcm"
    echo "    3. aes-128-gcm"
    echo "    4. 2022-blake3-aes-128-gcm"
    echo "    5. none (无加密)"
    echo "    6. 2022-blake3-chacha20-poly1305"
    read -p "请输入数字 [默认: 1]: " method_choice
    
    case "$method_choice" in
        1) method="chacha20-ietf-poly1305";;
        2) method="aes-256-gcm";;
        3) method="aes-128-gcm";;
        4) method="2022-blake3-aes-128-gcm";;
        5) method="none";;
        6) method="2022-blake3-chacha20-poly1305";;
        *) method="chacha20-ietf-poly1305";;
    esac

    # 设置密码
    if [[ "$method" == "none" ]]; then
        # 情况一：加密方法为 none，直接设置空密码
        password=""
        echo "加密方法为 none，将使用空密码"
    else
        # 情况二：其他加密方法，可选择自定义或随机生成密码
        read -p "是否要自定义密码？(y/n): " custom_pwd
        if [[ "$custom_pwd" =~ ^[Yy]$ ]]; then
            # 选择自定义密码
            read -p "请输入您的密码: " password
            while [[ -z "$password" ]]; do
                echo "密码不能为空，请重新输入"
                read -p "请输入您的密码: " password
            done
        else
            # 选择随机生成密码
            password=$(openssl rand -base64 32)
            echo "已为您随机生成密码: $password"
        fi
    fi
}

download_ss() {
    version=$(curl -s https://api.github.com/repos/${repo_version}/shadowsocks-rust/releases/latest | jq -r '.tag_name')
    wget -qO- "https://github.com/${repo_version}/shadowsocks-rust/releases/download/${version}/shadowsocks-${version}.${arch}-unknown-linux-gnu.tar.xz" | tar -xJf - -C /usr/local/bin ssserver
    chmod +x /usr/local/bin/ssserver
}

create_json() {
    cat > /etc/systemd/system/ss-rust.service <<EOF
[Unit]
Description=shadowsocks-rust
After=network-online.target

[Service]
Type=simple
User=root
LimitNOFILE=102400
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/ssserver -c /etc/ss-rust.json

[Install]
WantedBy=multi-user.target
EOF

    cat > /etc/ss-rust.json <<EOF
{
    "server": "::",
    "server_port": ${server_port},
    "method": "${method}",
    "password": "${password}",
    "mode": "tcp_and_udp",
    "fast_open": true,
    "no_delay": true,
    "reuse_port": true,
    "ipv6_first": false
}
EOF
}

modify_json() {
    [[ -f /etc/ss-rust.json ]] && jq '. + {plugin: "obfs-server", plugin_opts: "obfs=http", server: "0.0.0.0"}' /etc/ss-rust.json > /etc/ss-rust.json.tmp && mv /etc/ss-rust.json.tmp /etc/ss-rust.json
}

# 主程序
check_system
case "$1" in
    update) 
        [[ "$2" == "full-extra" ]] && repo_version="midori01"
        version=$(download_ss) && systemctl restart ss-rust && echo "shadowsocks-rust ${version} 更新完成" || echo "shadowsocks-rust 更新失败"
        ;;
    uninstall)
        systemctl disable --now ss-rust > /dev/null 2>&1
        rm -f /usr/local/bin/ssserver /etc/ss-rust.json /etc/systemd/system/ss-rust.service /usr/local/bin/obfs-server /usr/local/bin/obfs-local
        echo "Shadowsocks-rust 已卸载"
        ;;
    obfs)
        wget -qO /usr/local/bin/obfs-server "https://github.com/midori01/simple-obfs/releases/download/v1.0.3-midori-build/obfs-server-${arch}" && chmod +x /usr/local/bin/obfs-server && echo "obfs-server 已安装"
        modify_json && systemctl restart ss-rust
        ;;
    *)
        set_variable
        download_ss
        create_json
        systemctl enable --now ss-rust > /dev/null 2>&1
        systemctl restart ss-rust
        echo -e "\nShadowsocks-rust 安装完成"
        echo -e "端口: ${server_port}"
        echo -e "加密方法: ${method}"
        [[ -n "$password" ]] && echo -e "密码: ${password}"
        ;;
esac
